name: Veracode Get Policy Scan Flaws

run-name: Veracode Get Policy Scan Flaws - ${{ github.event.client_payload.repository.name }}

on:
  repository_dispatch:
    types: [veracode-get-policy-flaws]
    
jobs:
  register:
    runs-on: ubuntu-latest
    steps:
    - uses: vincent-deng/veracode-github-app@aws-ecs-dynamodb
      with:
        callback_url: ${{ github.event.client_payload.callback_url }}
        sha: ${{ github.event.client_payload.sha }}
        branch: ${{ github.event.client_payload.branch }}
        run_id: ${{ github.run_id }}
        repository_owner: ${{ github.event.client_payload.repository.owner }}
        repository_name: ${{ github.event.client_payload.repository.name }}
        event_type: ${{ github.event.client_payload.event_type }}
        enforce: true
       
  get-policy-flaws:
    runs-on: ubuntu-latest
    needs: register
    container:
      image: veracode/api-signing:latest
    steps:
      # Note: this will only work up to about 500 flaws
      #		due to Veracode results limiting
      # See the get_flaws.sh script in the helpers directory
      #		for a more elaborate method
      - name: get policy flaws
        run: |
          cd /tmp
          export VERACODE_API_KEY_ID=${{ secrets.API_ID }}
          export VERACODE_API_KEY_SECRET=${{ secrets.API_KEY }}
          application=$(http --auth-type veracode_hmac GET "https://api.veracode.com/appsec/v1/applications?name=${{ github.event.client_payload.profile_name }}" | jq -r '._embedded.applications[] | select(.profile.name == "${{ github.event.client_payload.profile_name }}")') 
          guid = echo "${application}" | jq -r '.guid'
          echo GUID: ${guid}
          resultsUrl = echo "${application}" | jq -r '.results_url'
          echo resultsUrl: ${resultsUrl}
          

